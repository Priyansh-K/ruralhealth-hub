{
	"info": {
		"_postman_id": "c3d4e5f6-g7h8-9012-cdef-234567890123",
		"name": "Rural Health Management System - Patient Portal",
		"description": "Complete API collection for the Patient Portal of the Rural Health Management System. This collection provides secure patient access to personal health information, visit history, medical records, and profile management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{patient_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure base URL is set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}",
					"",
					"// Auto-generate timestamps for requests",
					"pm.environment.set('current_timestamp', new Date().toISOString());",
					"",
					"// Generate date strings for testing",
					"const today = new Date();",
					"const tomorrow = new Date(today);",
					"tomorrow.setDate(tomorrow.getDate() + 1);",
					"pm.environment.set('tomorrow_date', tomorrow.toISOString().split('T')[0]);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"description": "Patient authentication and login",
			"item": [
				{
					"name": "Patient Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.environment.set('patient_token', jsonData.token);",
									"});",
									"",
									"pm.test('User type is patient', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_type).to.eql('patient');",
									"});",
									"",
									"pm.test('Patient information returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('patient');",
									"    pm.expect(jsonData.patient).to.have.property('full_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"alice.johnson@email.com\",\n    \"password\": \"PatientPass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/patient-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"patient-login"
							]
						},
						"description": "Authenticate patient for portal access"
					}
				},
				{
					"name": "Verify Patient Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Has patient information', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('patient');",
									"    pm.expect(jsonData.patient.user_type).to.eql('patient');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"me"
							]
						},
						"description": "Verify the current patient token and get patient information"
					}
				}
			]
		},
		{
			"name": "Patient Dashboard",
			"description": "Patient portal dashboard and overview",
			"item": [
				{
					"name": "Get Patient Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Dashboard has patient metrics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_visits');",
									"    pm.expect(jsonData).to.have.property('recent_visits');",
									"    pm.expect(jsonData).to.have.property('clinic_info');",
									"});",
									"",
									"pm.test('Clinic information is present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.clinic_info).to.have.property('name');",
									"    pm.expect(jsonData.clinic_info).to.have.property('phone');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"dashboard"
							]
						},
						"description": "Get patient portal dashboard with personal health summary"
					}
				}
			]
		},
		{
			"name": "Profile Management",
			"description": "Patient profile viewing and management",
			"item": [
				{
					"name": "Get Personal Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile has complete information', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('phone');",
									"    pm.expect(jsonData).to.have.property('date_of_birth');",
									"    pm.expect(jsonData).to.have.property('emergency_contact_name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"profile"
							]
						},
						"description": "Get complete patient profile information"
					}
				},
				{
					"name": "Update Personal Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});",
									"",
									"pm.test('Updated information reflected', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.patient.phone).to.eql('+1-555-0302');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"+1-555-0302\",\n    \"email\": \"alice.j.updated@email.com\",\n    \"address\": \"789 Oak Street, Apt 2B, Rural Town, ST 12345\",\n    \"emergency_contact_name\": \"Bob Johnson\",\n    \"emergency_contact_phone\": \"+1-555-0301\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"profile"
							]
						},
						"description": "Update patient profile information"
					}
				}
			]
		},
		{
			"name": "Visit History",
			"description": "Patient visit history and medical records",
			"item": [
				{
					"name": "Get Visit History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Visit history returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('page');",
									"});",
									"",
									"pm.test('Visits include complete information', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        const visit = jsonData.data[0];",
									"        pm.expect(visit).to.have.property('visit_date');",
									"        pm.expect(visit).to.have.property('reason');",
									"        pm.expect(visit).to.have.property('staff_name');",
									"        pm.expect(visit).to.have.property('diagnoses');",
									"        pm.expect(visit).to.have.property('prescriptions');",
									"        if (visit.id) pm.environment.set('visit_id', visit.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visits?page=1&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visits"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						},
						"description": "Get patient's complete visit history with medical records"
					}
				},
				{
					"name": "Filter Visits by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Filtered visits returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Visits are within date range', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(visit => {",
									"            const visitDate = new Date(visit.visit_date);",
									"            const fromDate = new Date('2024-01-01');",
									"            const toDate = new Date('2024-12-31');",
									"            pm.expect(visitDate).to.be.at.least(fromDate);",
									"            pm.expect(visitDate).to.be.at.most(toDate);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visits?from_date=2024-01-01&to_date=2024-12-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visits"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2024-01-01"
								},
								{
									"key": "to_date",
									"value": "2024-12-31"
								}
							]
						},
						"description": "Filter visits by specific date range"
					}
				},
				{
					"name": "Filter Visits by Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Year filtered visits returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('All visits are from 2024', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(visit => {",
									"            const visitYear = new Date(visit.visit_date).getFullYear();",
									"            pm.expect(visitYear).to.eql(2024);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visits?year=2024",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visits"
							],
							"query": [
								{
									"key": "year",
									"value": "2024"
								}
							]
						},
						"description": "Filter visits by specific year"
					}
				},
				{
					"name": "Get Specific Visit Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Complete visit details returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('patient');",
									"    pm.expect(jsonData).to.have.property('staff');",
									"    pm.expect(jsonData).to.have.property('reason');",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData).to.have.property('diagnoses');",
									"    pm.expect(jsonData).to.have.property('prescriptions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visits/{{visit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visits",
								"{{visit_id}}"
							]
						},
						"description": "Get detailed information for a specific visit"
					}
				}
			]
		},
		{
			"name": "Medical Records",
			"description": "Patient diagnoses and prescriptions",
			"item": [
				{
					"name": "Get All Diagnoses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Diagnoses list returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});",
									"",
									"pm.test('Diagnoses include medical information', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        const diagnosis = jsonData.data[0];",
									"        pm.expect(diagnosis).to.have.property('diagnosis_code');",
									"        pm.expect(diagnosis).to.have.property('description');",
									"        pm.expect(diagnosis).to.have.property('visit_date');",
									"        pm.expect(diagnosis).to.have.property('doctor_name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/diagnoses?page=1&per_page=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"diagnoses"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "20"
								}
							]
						},
						"description": "Get all patient diagnoses with doctor information"
					}
				},
				{
					"name": "Filter Diagnoses by Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Visit-specific diagnoses returned', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(diagnosis => {",
									"            pm.expect(diagnosis.visit_id).to.eql(parseInt(pm.environment.get('visit_id')));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/diagnoses?visit_id={{visit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"diagnoses"
							],
							"query": [
								{
									"key": "visit_id",
									"value": "{{visit_id}}"
								}
							]
						},
						"description": "Get diagnoses for a specific visit"
					}
				},
				{
					"name": "Get All Prescriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Prescriptions list returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});",
									"",
									"pm.test('Prescriptions include medication details', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        const prescription = jsonData.data[0];",
									"        pm.expect(prescription).to.have.property('medication_name');",
									"        pm.expect(prescription).to.have.property('dosage');",
									"        pm.expect(prescription).to.have.property('instructions');",
									"        pm.expect(prescription).to.have.property('prescribed_date');",
									"        pm.expect(prescription).to.have.property('doctor_name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/prescriptions?page=1&per_page=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"prescriptions"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "20"
								}
							]
						},
						"description": "Get all patient prescriptions with medication details"
					}
				},
				{
					"name": "Get Active Prescriptions Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Only active prescriptions returned', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(prescription => {",
									"            pm.expect(prescription.is_active).to.be.true;",
									"        });",
									"    }",
									"});",
									"",
									"pm.test('Active prescriptions have expiry dates', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(prescription => {",
									"            pm.expect(prescription).to.have.property('expires_date');",
									"            const expiryDate = new Date(prescription.expires_date);",
									"            const today = new Date();",
									"            pm.expect(expiryDate).to.be.at.least(today);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/prescriptions?active_only=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"prescriptions"
							],
							"query": [
								{
									"key": "active_only",
									"value": "true"
								}
							]
						},
						"description": "Get only currently active prescriptions"
					}
				}
			]
		},
		{
			"name": "Visit Requests",
			"description": "Patient visit requests and scheduling",
			"item": [
				{
					"name": "Request New Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Visit request created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('submitted successfully');",
									"});",
									"",
									"pm.test('Request details returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('request');",
									"    pm.expect(jsonData.request).to.have.property('id');",
									"    pm.expect(jsonData.request).to.have.property('status');",
									"    pm.expect(jsonData.request.status).to.eql('pending');",
									"    pm.environment.set('visit_request_id', jsonData.request.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Experiencing persistent headaches for the past week\",\n    \"preferred_date\": \"{{tomorrow_date}}\",\n    \"preferred_time\": \"morning\",\n    \"symptoms\": \"Severe headaches, sensitivity to light, some nausea\",\n    \"urgency_level\": \"moderate\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visit-requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visit-requests"
							]
						},
						"description": "Submit a new visit request"
					}
				},
				{
					"name": "Request Routine Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Routine visit request created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.request.urgency_level).to.eql('routine');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Routine blood pressure check\",\n    \"preferred_date\": \"2024-12-30\",\n    \"preferred_time\": \"afternoon\",\n    \"symptoms\": \"No acute symptoms, routine follow-up\",\n    \"urgency_level\": \"routine\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visit-requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visit-requests"
							]
						},
						"description": "Submit a routine visit request"
					}
				},
				{
					"name": "Request Urgent Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Urgent visit request created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.request.urgency_level).to.eql('urgent');",
									"    pm.expect(jsonData.request.preferred_time).to.eql('immediate');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Severe chest pain and shortness of breath\",\n    \"preferred_date\": \"{{tomorrow_date}}\",\n    \"preferred_time\": \"immediate\",\n    \"symptoms\": \"Sharp chest pain 8/10, difficulty breathing, sweating\",\n    \"urgency_level\": \"urgent\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visit-requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visit-requests"
							]
						},
						"description": "Submit an urgent visit request"
					}
				},
				{
					"name": "Get Visit Request Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Visit requests returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Requests include status information', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        const request = jsonData.data[0];",
									"        pm.expect(request).to.have.property('status');",
									"        pm.expect(request).to.have.property('submitted_at');",
									"        pm.expect(['pending', 'scheduled', 'completed', 'cancelled']).to.include(request.status);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visit-requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visit-requests"
							]
						},
						"description": "Get status of all visit requests"
					}
				}
			]
		},
		{
			"name": "Health Summary",
			"description": "Comprehensive health information",
			"item": [
				{
					"name": "Get Health Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Health summary is comprehensive', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('patient_info');",
									"    pm.expect(jsonData).to.have.property('recent_vitals');",
									"    pm.expect(jsonData).to.have.property('current_conditions');",
									"    pm.expect(jsonData).to.have.property('active_medications');",
									"    pm.expect(jsonData).to.have.property('upcoming_appointments');",
									"});",
									"",
									"pm.test('Patient info includes demographics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.patient_info).to.have.property('full_name');",
									"    pm.expect(jsonData.patient_info).to.have.property('age');",
									"    pm.expect(jsonData.patient_info).to.have.property('gender');",
									"});",
									"",
									"pm.test('Active medications have expiry dates', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.active_medications && jsonData.active_medications.length > 0) {",
									"        jsonData.active_medications.forEach(medication => {",
									"            pm.expect(medication).to.have.property('expires_date');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/health-summary",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"health-summary"
							]
						},
						"description": "Get comprehensive health summary with current conditions and medications"
					}
				}
			]
		},
		{
			"name": "Clinic Information",
			"description": "Clinic contact and service information",
			"item": [
				{
					"name": "Get Clinic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Clinic information is complete', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clinic');",
									"    pm.expect(jsonData.clinic).to.have.property('name');",
									"    pm.expect(jsonData.clinic).to.have.property('phone');",
									"    pm.expect(jsonData.clinic).to.have.property('email');",
									"    pm.expect(jsonData.clinic).to.have.property('address');",
									"    pm.expect(jsonData.clinic).to.have.property('hours');",
									"    pm.expect(jsonData.clinic).to.have.property('emergency_contact');",
									"});",
									"",
									"pm.test('Operating hours are provided', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.clinic.hours).to.have.property('monday');",
									"    pm.expect(jsonData.clinic.hours).to.have.property('friday');",
									"    pm.expect(jsonData.clinic.hours).to.have.property('sunday');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/clinic-info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"clinic-info"
							]
						},
						"description": "Get clinic contact information, hours, and emergency contacts"
					}
				},
				{
					"name": "Send Message to Clinic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Message sent successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('sent successfully');",
									"});",
									"",
									"pm.test('Message ID returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData).to.have.property('sent_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"Question about medication\",\n    \"message\": \"I'm experiencing some side effects from my Lisinopril. Can I schedule a consultation to discuss alternatives?\",\n    \"priority\": \"normal\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"messages"
							]
						},
						"description": "Send a message to the clinic"
					}
				}
			]
		},
		{
			"name": "Error Handling Examples",
			"description": "Examples of error scenarios and security controls",
			"item": [
				{
					"name": "Unauthorized Access to Other Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403 or 404', function () {",
									"    pm.expect([403, 404]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Access denied error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('Access denied');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visits/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visits",
								"99999"
							]
						},
						"description": "Attempt to access another patient's visit (should fail)"
					}
				},
				{
					"name": "Cross-Portal Access Attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Insufficient permissions error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/staff/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"staff",
								"dashboard"
							]
						},
						"description": "Attempt to access staff portal with patient token (should fail)"
					}
				},
				{
					"name": "Invalid Visit Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"\",\n    \"preferred_date\": \"2020-01-01\",\n    \"preferred_time\": \"invalid\",\n    \"urgency_level\": \"unknown\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/visit-requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"visit-requests"
							]
						},
						"description": "Attempt to create visit request with invalid data (should fail)"
					}
				},
				{
					"name": "Profile Update Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Phone validation error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('phone');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{patient_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"123\",\n    \"email\": \"invalid-email-format\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/patient/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"patient",
								"profile"
							]
						},
						"description": "Attempt to update profile with invalid phone number (should fail)"
					}
				}
			]
		}
	]
}
