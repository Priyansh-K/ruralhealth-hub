{
	"info": {
		"_postman_id": "b2c3d4e5-f6g7-8901-bcde-f12345678901",
		"name": "Rural Health Management System - Medical Portal",
		"description": "Complete API collection for the Medical Portal of the Rural Health Management System. This collection covers doctor and nurse workflows including patient care, visit management, diagnosis creation, and prescription management with role-based access control.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{medical_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure base URL is set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}",
					"",
					"// Auto-generate timestamps for requests",
					"pm.environment.set('current_timestamp', new Date().toISOString());"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"description": "Medical staff authentication (doctors and nurses)",
			"item": [
				{
					"name": "Doctor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.environment.set('doctor_token', jsonData.token);",
									"    pm.environment.set('medical_token', jsonData.token);",
									"});",
									"",
									"pm.test('User type is doctor', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_type).to.eql('doctor');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"dr.sarah@mountainclinic.com\",\n    \"password\": \"DoctorPass123!\",\n    \"login_type\": \"medical\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/clinic-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"clinic-login"
							]
						},
						"description": "Authenticate doctor with medical portal access"
					}
				},
				{
					"name": "Nurse Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.environment.set('nurse_token', jsonData.token);",
									"});",
									"",
									"pm.test('User type is nurse', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_type).to.eql('nurse');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nurse.mary@mountainclinic.com\",\n    \"password\": \"NursePass123!\",\n    \"login_type\": \"medical\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/clinic-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"clinic-login"
							]
						},
						"description": "Authenticate nurse with medical portal access"
					}
				},
				{
					"name": "Verify Medical Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Has medical user information', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(['doctor', 'nurse']).to.include(jsonData.user.user_type);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"auth",
								"me"
							]
						},
						"description": "Verify the current medical token and get user information"
					}
				}
			]
		},
		{
			"name": "Medical Portal Dashboard",
			"description": "Medical portal overview and dashboard",
			"item": [
				{
					"name": "Get Medical Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Dashboard has medical metrics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('my_visits_today');",
									"    pm.expect(jsonData).to.have.property('total_patients');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"dashboard"
							]
						},
						"description": "Get medical portal dashboard with relevant statistics"
					}
				}
			]
		},
		{
			"name": "Patient Information (Read-Only)",
			"description": "View patient information for medical care",
			"item": [
				{
					"name": "Get All Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has patient list', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    if (jsonData.data.length > 0) {",
									"        pm.environment.set('patient_id', jsonData.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/patients?page=1&per_page=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "20"
								}
							]
						},
						"description": "Get all patients for medical review (read-only access)"
					}
				},
				{
					"name": "Search Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search results contain query term', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        const patient = jsonData.data[0];",
									"        const searchTerm = 'John';",
									"        pm.expect(patient.full_name.toLowerCase()).to.include(searchTerm.toLowerCase());",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/patients?search=John",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"patients"
							],
							"query": [
								{
									"key": "search",
									"value": "John"
								}
							]
						},
						"description": "Search for patients by name or phone"
					}
				},
				{
					"name": "Get Patient Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Patient details include medical history', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"    pm.expect(jsonData).to.have.property('visits');",
									"    pm.expect(jsonData).to.have.property('diagnoses');",
									"    pm.expect(jsonData).to.have.property('prescriptions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/patients/{{patient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"patients",
								"{{patient_id}}"
							]
						},
						"description": "Get detailed patient information including medical history"
					}
				}
			]
		},
		{
			"name": "Staff Information (Read-Only)",
			"description": "View colleague information for collaboration",
			"item": [
				{
					"name": "Get All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has staff list', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    if (jsonData.data.length > 0) {",
									"        pm.environment.set('staff_id', jsonData.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/staff",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"staff"
							]
						},
						"description": "Get all staff members for collaboration (read-only)"
					}
				}
			]
		},
		{
			"name": "Visit Management",
			"description": "Create and manage patient visits",
			"item": [
				{
					"name": "Create Patient Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Visit created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('patient_id');",
									"    pm.environment.set('visit_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient_id\": {{patient_id}},\n    \"reason\": \"Patient presents with chest pain and shortness of breath\",\n    \"notes\": \"Symptoms started 2 hours ago, mild exertion triggers discomfort. Vital signs: BP 145/90, HR 78 bpm, O2 sat 95%\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							]
						},
						"description": "Create a new patient visit"
					}
				},
				{
					"name": "Get My Visits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains visits', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits?page=1&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						},
						"description": "Get visits created by the current medical user"
					}
				},
				{
					"name": "Get All Clinic Visits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains all clinic visits', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits?show_all=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							],
							"query": [
								{
									"key": "show_all",
									"value": "true"
								}
							]
						},
						"description": "Get all visits in the clinic for collaboration"
					}
				},
				{
					"name": "Filter Visits by Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All visits belong to specified patient', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(visit => {",
									"            pm.expect(visit.patient_id).to.eql(parseInt(pm.environment.get('patient_id')));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits?patient_id={{patient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "{{patient_id}}"
								}
							]
						},
						"description": "Get all visits for a specific patient"
					}
				},
				{
					"name": "Get Visit Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Visit details are complete', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('patient');",
									"    pm.expect(jsonData).to.have.property('staff');",
									"    pm.expect(jsonData).to.have.property('reason');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits/{{visit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits",
								"{{visit_id}}"
							]
						},
						"description": "Get detailed information for a specific visit"
					}
				},
				{
					"name": "Update Visit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Visit updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.notes).to.include('Updated physical examination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Patient presents with chest pain and shortness of breath\",\n    \"notes\": \"Updated physical examination reveals enlarged lymph nodes, patient stable. Symptoms started 2 hours ago, mild exertion triggers discomfort. EKG shows normal sinus rhythm.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits/{{visit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits",
								"{{visit_id}}"
							]
						},
						"description": "Update visit information"
					}
				}
			]
		},
		{
			"name": "Diagnosis Management (Doctors Only)",
			"description": "Create and manage medical diagnoses - restricted to doctors",
			"item": [
				{
					"name": "Create Diagnosis (Doctor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Diagnosis created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('diagnosis_code');",
									"    pm.environment.set('diagnosis_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"diagnosis_code\": \"I20.9\",\n    \"description\": \"Angina pectoris, unspecified. Chest pain likely cardiac in origin, requires further evaluation with ECG and cardiac enzymes.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Create a medical diagnosis (doctor only)"
					}
				},
				{
					"name": "Create Additional Diagnosis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Additional diagnosis created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.diagnosis_code).to.eql('Z51.11');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"diagnosis_code\": \"Z51.11\",\n    \"description\": \"Encounter for antineoplastic chemotherapy - follow-up care plan discussed\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Create additional diagnosis for the same visit"
					}
				},
				{
					"name": "Get All Diagnoses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains diagnoses', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Get all diagnoses in the clinic"
					}
				},
				{
					"name": "Nurse Attempt Diagnosis (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Access denied error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('Only doctors can perform this action');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{nurse_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"diagnosis_code\": \"I20.9\",\n    \"description\": \"Nurse cannot create diagnosis\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Attempt to create diagnosis as nurse (should fail)"
					}
				}
			]
		},
		{
			"name": "Prescription Management (Doctors Only)",
			"description": "Create and manage prescriptions - restricted to doctors",
			"item": [
				{
					"name": "Create Prescription (Doctor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Prescription created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('medication_name');",
									"    pm.environment.set('prescription_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"medication_name\": \"Nitroglycerin\",\n    \"dosage\": \"0.4mg sublingual\",\n    \"instructions\": \"Place under tongue as needed for chest pain, may repeat every 5 minutes up to 3 doses. If pain persists, seek emergency care.\",\n    \"duration_days\": 30\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/prescriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"prescriptions"
							]
						},
						"description": "Create a prescription (doctor only)"
					}
				},
				{
					"name": "Create Additional Prescriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Aspirin prescription created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.medication_name).to.eql('Aspirin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"medication_name\": \"Aspirin\",\n    \"dosage\": \"81mg\",\n    \"instructions\": \"Take once daily with food for cardiovascular protection\",\n    \"duration_days\": 90\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/prescriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"prescriptions"
							]
						},
						"description": "Create additional prescription"
					}
				},
				{
					"name": "Create Third Prescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Metoprolol prescription created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.medication_name).to.eql('Metoprolol');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"medication_name\": \"Metoprolol\",\n    \"dosage\": \"25mg\",\n    \"instructions\": \"Take twice daily, monitor blood pressure and heart rate\",\n    \"duration_days\": 30\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/prescriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"prescriptions"
							]
						},
						"description": "Create third prescription for comprehensive treatment"
					}
				},
				{
					"name": "Get All Prescriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains prescriptions', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/prescriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"prescriptions"
							]
						},
						"description": "Get all prescriptions in the clinic"
					}
				},
				{
					"name": "Nurse Attempt Prescription (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Access denied error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('Only doctors can perform this action');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{nurse_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{visit_id}},\n    \"medication_name\": \"Unauthorized Medication\",\n    \"dosage\": \"100mg\",\n    \"instructions\": \"Nurse cannot prescribe\",\n    \"duration_days\": 7\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/prescriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"prescriptions"
							]
						},
						"description": "Attempt to create prescription as nurse (should fail)"
					}
				}
			]
		},
		{
			"name": "Collaborative Workflows",
			"description": "Examples of doctor-nurse team workflows",
			"item": [
				{
					"name": "Nurse Initial Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Nurse visit created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('nurse_visit_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{nurse_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient_id\": {{patient_id}},\n    \"reason\": \"Initial nursing assessment for new admission\",\n    \"notes\": \"Patient admitted with complaints of fatigue and weight loss. Vital signs stable, baseline measurements recorded. BP: 130/85, HR: 75 bpm, Temp: 98.4°F\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							]
						},
						"description": "Nurse creates initial assessment visit"
					}
				},
				{
					"name": "Doctor Follow-up Examination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Doctor visit created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('doctor_visit_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient_id\": {{patient_id}},\n    \"reason\": \"Medical evaluation following nursing assessment\",\n    \"notes\": \"Physical examination reveals enlarged lymph nodes, recommending lab work and imaging studies. Patient reports 10-pound weight loss over 2 months.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							]
						},
						"description": "Doctor creates follow-up examination after nurse assessment"
					}
				},
				{
					"name": "Doctor Diagnosis for Team Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Team case diagnosis created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.diagnosis_code).to.eql('R59.9');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": {{doctor_visit_id}},\n    \"diagnosis_code\": \"R59.9\",\n    \"description\": \"Enlarged lymph nodes, unspecified. Requires further evaluation to rule out malignancy. Patient to undergo CT scan and lab work.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Doctor creates diagnosis based on collaborative assessment"
					}
				},
				{
					"name": "Nurse Follow-up Care",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Nurse follow-up created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.notes).to.include('patient education');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{nurse_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient_id\": {{patient_id}},\n    \"reason\": \"Patient education and follow-up care coordination\",\n    \"notes\": \"Discussed test procedures with patient, scheduled lab appointments, provided contact information for questions. Patient education completed on upcoming procedures.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits"
							]
						},
						"description": "Nurse creates follow-up visit for patient education"
					}
				}
			]
		},
		{
			"name": "Error Handling Examples",
			"description": "Examples of error scenarios and role-based restrictions",
			"item": [
				{
					"name": "Invalid Visit Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404 or 403', function () {",
									"    pm.expect([403, 404]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Access denied or not found', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/visits/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"visits",
								"99999"
							]
						},
						"description": "Attempt to access non-existent visit"
					}
				},
				{
					"name": "Cross-Portal Access Attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Insufficient permissions error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{medical_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/staff/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"staff",
								"dashboard"
							]
						},
						"description": "Attempt to access staff portal with medical token"
					}
				},
				{
					"name": "Invalid Medical Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{doctor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visit_id\": 99999,\n    \"diagnosis_code\": \"\",\n    \"description\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/portal/medical/diagnoses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"portal",
								"medical",
								"diagnoses"
							]
						},
						"description": "Attempt to create diagnosis with invalid data"
					}
				}
			]
		}
	]
}
